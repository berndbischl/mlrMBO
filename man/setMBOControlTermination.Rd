% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setMBOControlTermination.R
\name{setMBOControlTermination}
\alias{setMBOControlTermination}
\title{Set termination options.}
\usage{
setMBOControlTermination(control, iters = 10L, time.budget = NULL,
  exec.time.budget = NULL, target.fun.value = NULL,
  more.stop.conds = list())
}
\arguments{
\item{control}{[\code{\link{MBOControl}}]\cr
Control object for mbo.}

\item{iters}{[\code{integer(1)}]\cr
Number of sequential optimization steps.
Default is 10.}

\item{time.budget}{[\code{integer(1)} | NULL]\cr
Running time budget in seconds. Note that the actual mbo run can take more time since
the condition is checked after each iteration.}

\item{exec.time.budget}{[\code{integer(1)} | NULL]\cr
Execution time (time spent executing the function passed to \code{mbo})
budget in seconds. Note that the actual mbo run can take more time since
the condition is checked after each iteration.}

\item{target.fun.value}{[\code{numeric(1)}] | NULL]\cr
Stopping criterion for single crit optimization: Stop if a function evaluation
is better than this given target.value.}

\item{more.stop.conds}{[\code{list}]\cr
Optional list of termination conditions. Each condition needs to be a function
of a single argument \code{opt.state} of type \code{\link{OptState}} and should
return a list with the following elements:
\describe{
  \item{term [\code{logical(1)}]}{Logical value indicating whether the
  stopping condition is met.}
  \item{message [\code{character(1)}]}{Stopping message.}
}}
}
\value{
[\code{\link{MBOControl}}].
}
\description{
Extends an MBO control object with infill criteria and infill optimizer options.
}
\note{
See the other setMBOControl... functions and \code{makeMBOControl} for referenced arguments.
}
\examples{
fn = smoof::makeSphereFunction(1L)
ctrl = makeMBOControl()

# custom stopping condition (stop if target function value reached)
# We neglect the optimization direction (min/max) in this example.
yTargetValueTerminator = function(y.val) {
  force(y.val)
  function(opt.state) {
    opt.path = opt.state$opt.path
    current.best = getOptPathEl(opt.path, getOptPathBestIndex((opt.path)))$y
    term = (current.best <= y.val)
    message = if (!term) NA_character_ else sprintf("Target function value \%f reached.", y.val)
    return(list(term = term, message = message))
  }
}

# assign custom stopping condition
ctrl = setMBOControlTermination(ctrl, more.stop.conds = list(yTargetValueTerminator(0.05)))
res = mbo(fn, control = ctrl)
}
\seealso{
makeMBOControl
}

